---
title: "Untitled"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
# | output: false
source("load_packages.R")
```

```{r}
file_layouts <- read_excel("file_layouts.xlsx", sheet = 1) %>% mutate(`BUSINESS LOGIC` = NA) %>%
  bind_rows(
    read_excel("file_layouts.xlsx", sheet = 2)  %>% mutate(`BUSINESS LOGIC` = NA)
  ) %>%
  bind_rows(
    read_excel("file_layouts.xlsx", sheet = 3) %>% relocate(`BUSINESS LOGIC`, .after = 4)
  ) %>%
  bind_rows(
    read_excel("file_layouts.xlsx", sheet = 4)  %>% mutate(`BUSINESS LOGIC` = NA)
  ) %>%
  bind_rows(
    read_excel("file_layouts.xlsx", sheet = 5)  %>% mutate(`BUSINESS LOGIC` = NA)
  ) %>%
  set_names(
    names(.) %>% str_replace_all(" ", "_") %>% str_to_lower()
  )

for(i in seq_along(file_layouts$extract_name)[-1]){
  if(is.na(file_layouts$extract_name[[i]])){
    file_layouts$extract_name[[i]] <-file_layouts$extract_name[[i-1]]
  }
  if(is.na(file_layouts$folder[[i]])){
    file_layouts$folder[[i]] <-file_layouts$folder[[i-1]]
  }
}
file_layouts %>% write_csv("file_layouts.csv")
```

```{r}
file_layouts <- read_csv("file_layouts.csv") %>% 
  mutate(file = str_split_i(folder, "/", -1)
         ,file_type = str_split_i(folder, "/", -2) %>% 
           str_to_lower(), 
         table = str_remove_all(file,".tsv") %>% 
           str_separate_AbCd() %>% 
           str_replace_all("t_v", "tv")  %>% 
           str_replace_all("f_s_i", "fsi") %>% 
           str_replace_all("m_p_a_a", "mpaa") %>% 
           str_replace_all("u_e", "ue")  %>% 
           str_replace_all("i_m_p", "imp"),
         .after = folder)
file_layouts
file_layouts$table %>% unique
```

```{r}
file_layouts_2 <- file_layouts %>% 
  nest(.by = table, .key = "data1") %>% 
  inner_join(
    loader_tbl_occurences_sql %>% 
      nest(.by = tablename, .key = "data2"), 
    by = c("table" = "tablename")
  ) %>% 
  unnest(everything())

file_layouts_3 <- file_layouts_2 %>% 
  rename(col_names_adintel = extract_column) %>% 
  mutate(col_types = str_to_upper(col_types),
         col_types = if_else(col_types == "TINYINT", 
                             "SMALLINT", col_types),
         col_types = if_else(col_names_adintel == "AdDate", 
                             "DATE", col_types),
         col_types = if_else(col_names_adintel == "AdTime", 
                             "TIME", col_types),
         precision = if_else(col_types %in% 
                               c("INTEGER", "SMALLINT", "DATE", "TIME"),
                             NA, 
                             precision))
```

```{r}
new_pk_tbl <- media_layout %>% 
  select(old_table, new_table) %>% 
  inner_join(pk_tbl, by = c("new_table" = "table")) %>% 
  distinct(old_table, pk) %>% rename

sql_layout_temp <- file_layouts_3 %>% 
  nest(.by = c(table, col_names_adintel, col_names)) %>% 
  full_join(
    new_pk_tbl %>% mutate(is_unique = TRUE), 
    by = c("table" = "old_table", "col_names" = "pk")
  ) %>% 
  mutate(
    is_unique = !is.na(is_unique)
  ) %>% 
  unnest(everything()) 
```

```{r}

table = unique(sql_layout_temp$table)[1]

sql_tbl <- sql_layout_temp %>% 
  transmute(row = row_number(),
            table,
            column_name = col_names_adintel,
            data_type = col_types,
            precision = precision,
            unique = if_else(is_unique, column_name, NA)) %>% 
  nest(.by = table) %>% 
  mutate(tbl = map(data , ~ select(.x, -unique, -row)),
         unique = map(data, ~ .x %>% 
                        filter(!is.na(unique)) %>% 
                        pull(unique)), 
         .keep = "unused")

tbl_i <- sql_tbl %>% slice(1)

with(tbl_i,
glue("
CREATE TABLE {table} 
  ({ %>% paste(sep = ', ')})
  "
))


pmap(.l = pluck(tbl_i,"tbl", 1), .f = sql_column_defition) %>% list_c() %>% 
  glue_sql_collapse(sep = ", \n")







$unique
  summarise(data = select(column_name : is_unique),
            unique = )
tbl_i
sql_layout_temp %>% filter







sql_layout_temp %>% 
  select(table, col_names_adintel, col_types, precision, is_unique) %>% 
  mutate(unique_idx = if_else(is_unique))


sql_layout_temp %>% 
  transmute(table,
            column_name = col_names_adintel,
            data_type = col_tyoes,
            precision = precision,
            unique = if_else(is_unique, col_names_adintel))
  summarise(columns = )


sql_layout_temp %>% 
  summarise(unique_idx = list(col_names_adintel[is_unique]), .by = table) %>% 
  pull(unique_idx)
list(
  table = "xxx",
  columns_list = ,
  unique = ,
  partition_by = "AdDate",
  range = 2010 : 2021,
)



sql_layout_temp %>% 
  mutate


```


```{r}
table <- "spot_tv"

columns <- sql_layout_temp %>% 
  filter(table == !!table) %>% 
  transmute(column_name = col_names_adintel,
            data_type = col_types,
            precision = precision) %>% 
  sql_create_table_cols()

unique_cols <- sql_layout_temp %>%
  filter(table == !!table) %>% 
  filter(is_unique) %>% 
  pull(col_names_adintel) 

unique_idx <- glue_collapse(glue('"{unique_cols}"'), ", ")

main_query <- glue('
  CREATE TABLE {table} (
    {columns},
    UNIQUE (unique_cols)
  )
'
)

partition_query <-  glue('PARTITION BY RANGE ("AdDate")')
 
partitions <- function(table, years){
  map(years, 
    ~ glue(
  "
  CREATE TABLE {table}__y{.x} PARTITION OF {table}
    FOR VALUES FROM ('{.x}-01-01') TO ('{.x + 1}-01-01');
  "
    )
  ) %>% list_c
}


year <- 2010:2021 

glue(
  "
  {main_query}
  {partition_query}:
  "
)

paste(main_query, partition_query, ;)





query

con <- dbConnect(
  RPostgres::Postgres(),
  dbname = "adintel",
  host = '10.147.18.200',
  port = 5432,
  user = 'postgres',
  password = '100%Postgres'
)

dbSendQuery(con, query)

```
