---
title: "Split Occurrences Tables"
format: html
editor: visual
---

# Load Necessary Packages

```{r}
#| output: false
devtools::install_github('f-dallolio/fdutils')
devtools::install_github('f-dallolio/adloadr')
devtools::install_github('f-dallolio/adintelr')

library(tidyverse)
library(glue)
library(dbcooper)
library(fdutils)
library(adloadr)
library(adintelr)
```

```{r}
split_occurrence_query <- function(con, new_table, old_table, media_type_id){
  statement <- glue("CREATE TABLE IF NOT EXISTS {new_table} AS 
                      SELECT * FROM {old_table} WHERE media_type_id = {media_type_id}")
  # print(statement)
  DBI::dbSendQuery(conn = con, statement = statement)
  print(
    glue('Done with ({new_table}) from ({old_table})')
  )
}

drop_old_table_query <- function(con, old_table){
  statement <- glue('DROP TABLE IF EXISTS {old_table}')
  print(statement)
  DBI::dbSendQuery(conn = con, statement = statement)
}

drop_old_table_i <- function(con, x){
  i=1
  seq_id <- seq_along(row_number(x))
  old_table <- unique(x$old_table)
  for(i in seq_id){
    new_table <- x$new_table[[i]]
    media_type_id <- x$media_type_id[[i]]
    split_occurrence_query(con = con, new_table = new_table, old_table = old_table, media_type_id = media_type_id)
  }
drop_old_table_query(con = con, old_table = old_table)
}

drop_old_table <- function(con, table_list){
  walk(table_list, ~ drop_old_table_i(con, .x))
}

split_occurrence_table <- function(con, x, old_table_column){
  id_names <- x %>% distinct({{old_table_column}}) %>% pull
  id_list <- map(.x = id_names, .f = ~ filter(x, {{old_table_column}} == .x)) %>% set_names(id_names)
  id_list
}

year=2016:2018
drop_old_table_allyears <- function(years, password = "100%Postgres"){
  for(year in years){
    
    print(glue('
          
          Year {year}
          
          '))
    
    con <- connect_db_general(year = year, password = password)
    tbl_list <- DBI::dbListTables(con)
    media_tbl <- media_layout %>% select(old_table, new_table, media_type_id) %>% 
      filter(old_table %in% tbl_list)
    table_list <- split_occurrence_table(con = con, x = media_tbl, old_table_column = old_table)
    drop_old_table(con = con, table_list = table_list)
    DBI::dbDisconnect(con)
  }
}


drop_old_table_allyears(years = 2016:2018, password = "100%Postgres")


con <- connect_db_general(year = 2014,password = '100%Postgres')
tbl_list <- DBI::dbListTables(con)
media_tbl <- media_layout %>% select(old_table, new_table, media_type_id) %>% 
  filter(old_table %in% tbl_list)
table_list <- split_occurrence_table(con = con, x = media_tbl, old_table_column = old_table)
DBI::dbDisconnect(con)

```
